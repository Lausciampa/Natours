// 34)
@mixin clearfix {
	&::after {
		content: "";
		display: table;
		clear: both;
	}
}

// 52) absolute center
@mixin absCenter {
	position: absolute;
	top: 50%;
	left: 50%;
	transform: translate(-50%, -50%);
}

// 56) MEDIA QUERY MANAGER
/*
0 - 600px : Phone
600 - 900px : Tablet Portrait
900 - 1200px : Tablet Landscape
[1200 - 1800px : These are the regular styles already written (these apply as this is a 'desktop first' project)]
+1800px : Large Desktop

$breakpoint argument choices:
- phone
- tablet-port
- tablet-land
- big-desktop

In Media Queries (MQ), em's & rem's are not affected by the root font size that we set (html selector).
This means that in MQ, em's and rem's are equal to the font size that comes from the browser (either the default value -16px- or whichever the user set). Em's are the best alternative in MQ, so we are using em's here. We simply divide the max/min-width by 16px [1em = 16px (browser's default value)] and we pass that value to the @media. E.g. 600px / 16px = 37.5em
*/

@mixin respond($breakpoint) {
	@if $breakpoint == phone {
		// 600px / 16px = 37.5em
		@media (max-width: 37.5em) {
			@content;
		}
		// 56) @content allows to pass a block of code to the @media query. This block is found in the relevant selector's declaration.
	}

	@if $breakpoint == tablet-port {
		// 900px / 16px = 56.25em
		@media (max-width: 56.25em) {
			@content;
		}
		// 56) @content allows to pass a block of code to the @media query. This block is found in the relevant selector's declaration.
	}

	@if $breakpoint == tablet-land {
		// 1200px / 16px = 75em
		@media (max-width: 75em) {
			@content;
		}
		// 56) @content allows to pass a block of code to the @media query. This block is found in the relevant selector's declaration.
	}

	@if $breakpoint == big-desktop {
		// 1800px / 16px = 112.5em
		@media (min-width: 112.5em) {
			@content;
		}
		// 56) @content allows to pass a block of code to the @media query. This block is found in the relevant selector's declaration.
	}
}
